module StammaTests.SquareTests

open Stamma
open NUnit.Framework
open FsUnitTyped

(*Excessive number of test cases *)
[<TestCase(1, 1, "a1")>]
[<TestCase(1, 2, "a2")>]
[<TestCase(1, 3, "a3")>]
[<TestCase(1, 4, "a4")>]
[<TestCase(1, 5, "a5")>]
[<TestCase(1, 6, "a6")>]
[<TestCase(1, 7, "a7")>]
[<TestCase(1, 8, "a8")>]
[<TestCase(1, 9, "a9")>]
[<TestCase(1, 10, "a10")>]
[<TestCase(2, 1, "b1")>]
[<TestCase(2, 2, "b2")>]
[<TestCase(2, 3, "b3")>]
[<TestCase(2, 4, "b4")>]
[<TestCase(2, 5, "b5")>]
[<TestCase(2, 6, "b6")>]
[<TestCase(2, 7, "b7")>]
[<TestCase(2, 8, "b8")>]
[<TestCase(2, 9, "b9")>]
[<TestCase(2, 10, "b10")>]
[<TestCase(3, 1, "c1")>]
[<TestCase(3, 2, "c2")>]
[<TestCase(3, 3, "c3")>]
[<TestCase(3, 4, "c4")>]
[<TestCase(3, 5, "c5")>]
[<TestCase(3, 6, "c6")>]
[<TestCase(3, 7, "c7")>]
[<TestCase(3, 8, "c8")>]
[<TestCase(3, 9, "c9")>]
[<TestCase(3, 10, "c10")>]
[<TestCase(4, 1, "d1")>]
[<TestCase(4, 2, "d2")>]
[<TestCase(4, 3, "d3")>]
[<TestCase(4, 4, "d4")>]
[<TestCase(4, 5, "d5")>]
[<TestCase(4, 6, "d6")>]
[<TestCase(4, 7, "d7")>]
[<TestCase(4, 8, "d8")>]
[<TestCase(4, 9, "d9")>]
[<TestCase(4, 10, "d10")>]
[<TestCase(5, 1, "e1")>]
[<TestCase(5, 2, "e2")>]
[<TestCase(5, 3, "e3")>]
[<TestCase(5, 4, "e4")>]
[<TestCase(5, 5, "e5")>]
[<TestCase(5, 6, "e6")>]
[<TestCase(5, 7, "e7")>]
[<TestCase(5, 8, "e8")>]
[<TestCase(5, 9, "e9")>]
[<TestCase(5, 10, "e10")>]
[<TestCase(6, 1, "f1")>]
[<TestCase(6, 2, "f2")>]
[<TestCase(6, 3, "f3")>]
[<TestCase(6, 4, "f4")>]
[<TestCase(6, 5, "f5")>]
[<TestCase(6, 6, "f6")>]
[<TestCase(6, 7, "f7")>]
[<TestCase(6, 8, "f8")>]
[<TestCase(6, 9, "f9")>]
[<TestCase(6, 10, "f10")>]
[<TestCase(7, 1, "g1")>]
[<TestCase(7, 2, "g2")>]
[<TestCase(7, 3, "g3")>]
[<TestCase(7, 4, "g4")>]
[<TestCase(7, 5, "g5")>]
[<TestCase(7, 6, "g6")>]
[<TestCase(7, 7, "g7")>]
[<TestCase(7, 8, "g8")>]
[<TestCase(7, 9, "g9")>]
[<TestCase(7, 10, "g10")>]
[<TestCase(8, 1, "h1")>]
[<TestCase(8, 2, "h2")>]
[<TestCase(8, 3, "h3")>]
[<TestCase(8, 4, "h4")>]
[<TestCase(8, 5, "h5")>]
[<TestCase(8, 6, "h6")>]
[<TestCase(8, 7, "h7")>]
[<TestCase(8, 8, "h8")>]
[<TestCase(8, 9, "h9")>]
[<TestCase(8, 10, "h10")>]
[<TestCase(9, 1, "i1")>]
[<TestCase(9, 2, "i2")>]
[<TestCase(9, 3, "i3")>]
[<TestCase(9, 4, "i4")>]
[<TestCase(9, 5, "i5")>]
[<TestCase(9, 6, "i6")>]
[<TestCase(9, 7, "i7")>]
[<TestCase(9, 8, "i8")>]
[<TestCase(9, 9, "i9")>]
[<TestCase(9, 10, "i10")>]
[<TestCase(10, 1, "j1")>]
[<TestCase(10, 2, "j2")>]
[<TestCase(10, 3, "j3")>]
[<TestCase(10, 4, "j4")>]
[<TestCase(10, 5, "j5")>]
[<TestCase(10, 6, "j6")>]
[<TestCase(10, 7, "j7")>]
[<TestCase(10, 8, "j8")>]
[<TestCase(10, 9, "j9")>]
[<TestCase(10, 10, "j10")>]
let ``toAlg Test`` (rank, file, expected) = 
    Square.toAlg { Rank = rank
                   File = file }
    |> shouldEqual expected

[<TestCase(1, 1, "a1")>]
[<TestCase(1, 2, "a2")>]
[<TestCase(1, 3, "a3")>]
[<TestCase(1, 4, "a4")>]
[<TestCase(1, 5, "a5")>]
[<TestCase(1, 6, "a6")>]
[<TestCase(1, 7, "a7")>]
[<TestCase(1, 8, "a8")>]
[<TestCase(1, 9, "a9")>]
[<TestCase(1, 10, "a10")>]
[<TestCase(2, 1, "b1")>]
[<TestCase(2, 2, "b2")>]
[<TestCase(2, 3, "b3")>]
[<TestCase(2, 4, "b4")>]
[<TestCase(2, 5, "b5")>]
[<TestCase(2, 6, "b6")>]
[<TestCase(2, 7, "b7")>]
[<TestCase(2, 8, "b8")>]
[<TestCase(2, 9, "b9")>]
[<TestCase(2, 10, "b10")>]
[<TestCase(3, 1, "c1")>]
[<TestCase(3, 2, "c2")>]
[<TestCase(3, 3, "c3")>]
[<TestCase(3, 4, "c4")>]
[<TestCase(3, 5, "c5")>]
[<TestCase(3, 6, "c6")>]
[<TestCase(3, 7, "c7")>]
[<TestCase(3, 8, "c8")>]
[<TestCase(3, 9, "c9")>]
[<TestCase(3, 10, "c10")>]
[<TestCase(4, 1, "d1")>]
[<TestCase(4, 2, "d2")>]
[<TestCase(4, 3, "d3")>]
[<TestCase(4, 4, "d4")>]
[<TestCase(4, 5, "d5")>]
[<TestCase(4, 6, "d6")>]
[<TestCase(4, 7, "d7")>]
[<TestCase(4, 8, "d8")>]
[<TestCase(4, 9, "d9")>]
[<TestCase(4, 10, "d10")>]
[<TestCase(5, 1, "e1")>]
[<TestCase(5, 2, "e2")>]
[<TestCase(5, 3, "e3")>]
[<TestCase(5, 4, "e4")>]
[<TestCase(5, 5, "e5")>]
[<TestCase(5, 6, "e6")>]
[<TestCase(5, 7, "e7")>]
[<TestCase(5, 8, "e8")>]
[<TestCase(5, 9, "e9")>]
[<TestCase(5, 10, "e10")>]
[<TestCase(6, 1, "f1")>]
[<TestCase(6, 2, "f2")>]
[<TestCase(6, 3, "f3")>]
[<TestCase(6, 4, "f4")>]
[<TestCase(6, 5, "f5")>]
[<TestCase(6, 6, "f6")>]
[<TestCase(6, 7, "f7")>]
[<TestCase(6, 8, "f8")>]
[<TestCase(6, 9, "f9")>]
[<TestCase(6, 10, "f10")>]
[<TestCase(7, 1, "g1")>]
[<TestCase(7, 2, "g2")>]
[<TestCase(7, 3, "g3")>]
[<TestCase(7, 4, "g4")>]
[<TestCase(7, 5, "g5")>]
[<TestCase(7, 6, "g6")>]
[<TestCase(7, 7, "g7")>]
[<TestCase(7, 8, "g8")>]
[<TestCase(7, 9, "g9")>]
[<TestCase(7, 10, "g10")>]
[<TestCase(8, 1, "h1")>]
[<TestCase(8, 2, "h2")>]
[<TestCase(8, 3, "h3")>]
[<TestCase(8, 4, "h4")>]
[<TestCase(8, 5, "h5")>]
[<TestCase(8, 6, "h6")>]
[<TestCase(8, 7, "h7")>]
[<TestCase(8, 8, "h8")>]
[<TestCase(8, 9, "h9")>]
[<TestCase(8, 10, "h10")>]
[<TestCase(9, 1, "i1")>]
[<TestCase(9, 2, "i2")>]
[<TestCase(9, 3, "i3")>]
[<TestCase(9, 4, "i4")>]
[<TestCase(9, 5, "i5")>]
[<TestCase(9, 6, "i6")>]
[<TestCase(9, 7, "i7")>]
[<TestCase(9, 8, "i8")>]
[<TestCase(9, 9, "i9")>]
[<TestCase(9, 10, "i10")>]
[<TestCase(10, 1, "j1")>]
[<TestCase(10, 2, "j2")>]
[<TestCase(10, 3, "j3")>]
[<TestCase(10, 4, "j4")>]
[<TestCase(10, 5, "j5")>]
[<TestCase(10, 6, "j6")>]
[<TestCase(10, 7, "j7")>]
[<TestCase(10, 8, "j8")>]
[<TestCase(10, 9, "j9")>]
[<TestCase(10, 10, "j10")>]
let ``ofAlg Test`` (rank, file, str) = 
    Square.ofAlg str |> shouldEqual { Rank = rank
                                      File = file }
